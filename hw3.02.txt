Домашнее задание к занятию "3.2. Работа в терминале, лекция 2"
1.  Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа; опишите ход своих мыслей, если считаете что она могла бы быть другого типа.

cd - встроенная в shell команда
Если бы она была внешней утилитой, то при ее запуске создавался бы отдельный процесс в котором она отработала.
Рабочий каталог изменлся бы для дочернего процесса и по завершении работы cd все изменения будут утеряны вместе с закрытым
дочерним процессом. Поэтому cd должна быть встроенной командой.


2.  Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l? man grep поможет в ответе на этот вопрос. Ознакомьтесь с документом о других подобных некорректных вариантах использования pipe.

grep <some_string> <some_file> -c
Выведет количество строк в которых есть вхождение подстроки <some_string>



3.  Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?

systemd(1)


4.  Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала?

ls -l 2>/dev/pts/3


5.  Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

vagrant@vagrant:~$ cat < 1.txt > out.txt


6.  Получится ли находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

Да, при условии что я буду уже зологинен в TTY а чтобы наблюдать вывод - переключусь на него.
Иначе ошибка Permission denied и вывод вернется в PTY




7.  Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит?

Создаем новый дескриптор 5 указывающий на дескриптор 1 (stdout)
Поэтому вывод команды echo перенаправится на дескриптор 1




8.  Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty? Напоминаем: по умолчанию через pipe передается только stdout команды слева от | на stdin команды справа. Это можно сделать, поменяв стандартные потоки местами через промежуточный новый дескриптор, который вы научились создавать в предыдущем вопросе.

Получится.

agrant@vagrant:~$ ls 1.txt 4.txt
ls: cannot access '4.txt': No such file or directory
1.txt
vagrant@vagrant:~$ ls 1.txt 4.txt 5>&2 2>&1 1>&5 | grep "."
1.txt
ls: cannot access '4.txt': No such file or directory
vagrant@vagrant:~$ ls 1.txt 4.txt 5>&2 2>&1 1>&5 | grep "." -c
1.txt
1
vagrant@vagrant:~$




9.  Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?

Командой env



10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe.

/proc/<PID>/cmdline файл в котором находится полная командная строка процесса и аргументы с которыми был запущен процес (если есть)

/proc/<PID>/exe - символьная ссылка, содержит в себе полный путь на исполняему команду




11. Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo.

grep 'sse' /proc/cpuinfo

sse 4.2


12. При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в лекции 3.2. Однако:

vagrant@netology1:~$ ssh localhost 'tty'
not a tty
Почитайте, почему так происходит, и как изменить поведение.

Потому что для ssh по умолчанию не выделяется псевдо-терминал. Чтобы принудительно создать его есть флаг -t и -tt

vagrant@vagrant:~$ ssh localhost 'tty'
vagrant@localhost's password:
not a tty
vagrant@vagrant:~$ ssh -tt localhost 'tty'
vagrant@localhost's password:
/dev/pts/2
Connection to localhost closed.
vagrant@vagrant:~$



13. Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.

При попытке перенести процесс wget в screen возникла ошибка. После отключения требования родственности процесса (kernel.yama.ptrace_scope = 0) процесс перенесся.

vagrant@vagrant:~$ ps a
    PID TTY      STAT   TIME COMMAND
    648 tty1     Ss+    0:00 /sbin/agetty -o -p -- \u --noclear tty1 linux
   1240 pts/0    Ss     0:00 -bash
   1284 pts/1    Ss     0:00 -bash
   1295 pts/1    S+     0:00 screen
   1297 pts/2    Ss     0:00 /bin/bash
   1348 pts/0    S+     0:01 wget https://mirror.linux-ia64.org/ubuntu-releases/22.04/ubuntu-22.04-desktop-amd64.iso
   1349 pts/2    R+     0:00 ps a
vagrant@vagrant:~$ reptyr 1348
Unable to attach to pid 1348: Operation not permitted
The kernel denied permission while attaching. If your uid matches
the target's, check the value of /proc/sys/kernel/yama/ptrace_scope.
For more information, see /etc/sysctl.d/10-ptrace.conf
vagrant@vagrant:~$ sysctl kernel.yama
kernel.yama.ptrace_scope = 1
vagrant@vagrant:~$ sudo sysctl kernel.yama.ptrace_scope=0
kernel.yama.ptrace_scope = 0
vagrant@vagrant:~$ ps a
    PID TTY      STAT   TIME COMMAND
    648 tty1     Ss+    0:00 /sbin/agetty -o -p -- \u --noclear tty1 linux
   1240 pts/0    Ss     0:00 -bash
   1284 pts/1    Ss     0:00 -bash
   1295 pts/1    S+     0:00 screen
   1297 pts/2    Ss     0:00 /bin/bash
   1610 pts/0    S+     0:00 wget https://mirror.linux-ia64.org/ubuntu-releases/22.04/ubuntu-22.04-desktop-amd64.iso
   1611 pts/2    R+     0:00 ps a
vagrant@vagrant:~$ reptyr 1610
ubuntu-22.04-desktop-amd64.iso.2   1%[                                                          ]  40.66M   656KB/s    eta 50m 8s ^


14. sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем, так как перенаправлением занимается процесс shell'а, который запущен без sudo под вашим пользователем. Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.

tee читает данные из stdin и записывает их в stdout и в файл.
Во втором случае мы перенапрявляем вывод echo в tee, запущенный с правами записи в /root
