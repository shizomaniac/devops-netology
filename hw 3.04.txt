1. На лекции мы познакомились с node_exporter. В демонстрации его исполняемый файл запускался в background.
Этого достаточно для демо, но не для настоящей production-системы, где процессы должны находиться под внешним управлением.
Используя знания из лекции по systemd, создайте самостоятельно простой unit-файл для node_exporter:

поместите его в автозагрузку,
предусмотрите возможность добавления опций к запускаемому процессу через внешний файл (посмотрите, например, на systemctl cat cron),
удостоверьтесь, что с помощью systemctl процесс корректно стартует, завершается, а после перезагрузки автоматически поднимается.

root@vagrant:~# useradd --no-create-home --shell /bin/false node_exporter
root@vagrant:~# chown node_exporter:node_exporter /usr/sbin/node_exporter
root@vagrant:~# systemctl cat node_exporter
# /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter

[Service]
User=node_exporter
EnvironmentFile=/etc/sysconfig/node_exporter
ExecStart=/usr/sbin/node_exporter $OPTIONS

[Install]
WantedBy=multi-user.target
vagrant@vagrant:~$ cat /etc/sysconfig/node_exporter
OPTIONS=""

vagrant@vagrant:~$ sudo systemctl enable node_exporter
Created symlink /etc/systemd/system/multi-user.target.wants/node_exporter.service → /etc/systemd/system/node_exporter.service.
root@vagrant:~# reboot


vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2022-08-01 12:38:26 UTC; 41s ago
   Main PID: 597 (node_exporter)
      Tasks: 4 (limit: 1033)
     Memory: 14.0M
        CPU: 29ms
     CGroup: /system.slice/node_exporter.service
             └─597 /usr/sbin/node_exporter

Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=thermal_zone
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=time
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=timex
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=udp_queues
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=uname
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=vmstat
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=xfs
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:115 level=info collector=zfs
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.067Z caller=node_exporter.go:199 level=info msg="Listening on" address=:9100
Aug 01 12:38:27 vagrant node_exporter[597]: ts=2022-08-01T12:38:27.083Z caller=tls_config.go:195 level=info msg="TLS is disabled." http2=false


2. Ознакомьтесь с опциями node_exporter и выводом /metrics по-умолчанию. Приведите несколько опций, которые вы бы выбрали для базового мониторинга хоста по CPU, памяти, диску и сети.

--collector.loadavg  #Аналог uptime
--collector.meminfo  #Выводит данные по количеству свободной памяти и общее количество
--collector.diskstats   #Выводит статистику по операциям дискового ввода-вывода
--collector.filesystem  #Выводит статистику по свободному и занятому месту на диске
--collector.netdev   #Выводит статистику по сетевому траффику


3. Установите в свою виртуальную машину Netdata. Воспользуйтесь готовыми пакетами для установки (sudo apt install -y netdata). 
После успешной установки:

в конфигурационном файле /etc/netdata/netdata.conf в секции [web] замените значение с localhost на bind to = 0.0.0.0,
добавьте в Vagrantfile проброс порта Netdata на свой локальный компьютер и сделайте vagrant reload:
config.vm.network "forwarded_port", guest: 19999, host: 19999
После успешной перезагрузки в браузере на своем ПК (не в виртуальной машине) вы должны суметь зайти на localhost:19999. 
Ознакомьтесь с метриками, которые по умолчанию собираются Netdata и с комментариями, которые даны к этим метрикам.

https://github.com/shizomaniac/devops-netology/blob/main/netdata_screenshot.png

4. Можно ли по выводу dmesg понять, осознает ли ОС, что загружена не на настоящем оборудовании, а на системе виртуализации?

Можно:
vagrant@vagrant:~$ sudo dmesg | grep -i 'virtual'
[    0.000000] DMI: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
[    0.000766] CPU MTRRs all blank - virtualized system.
[    0.002989] Booting paravirtualized kernel on KVM
[    3.439074] systemd[1]: Detected virtualization oracle.


5. Как настроен sysctl fs.nr_open на системе по-умолчанию? Узнайте, что означает этот параметр. 
Какой другой существующий лимит не позволит достичь такого числа (ulimit --help)?

Лимит на количество открытых файловых дескрипторов для ядра. Лимит для пользователя ограничен - 1024 и не может превышать
лимита ядра.

Лимит пользователя:
root@vagrant:~# ulimit -n
1024

Лимит в ядре:
root@vagrant:~# cat /proc/sys/fs/nr_open
1048576
1024*1024



6. Запустите любой долгоживущий процесс (не ls, который отработает мгновенно, а, например, sleep 1h)
в отдельном неймспейсе процессов; покажите, что ваш процесс работает под PID 1 через nsenter.
Для простоты работайте в данном задании под root (sudo -i). Под обычным пользователем требуются дополнительные опции (--map-root-user) и т.д.

root@vagrant:~# unshare -Upf --mount-proc sleep 1h
root@vagrant:~# ps au
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         665  0.0  0.1   5828  1740 tty1     Ss+  13:17   0:00 /sbin/agetty -o -p -- \u --noclear tty1 linux
vagrant     5055  0.0  0.3   7404  3776 pts/0    Ss   13:19   0:00 -bash
root       32892  0.0  0.4   9264  4452 pts/0    S    21:13   0:00 sudo -i
root       32894  0.0  0.4   7236  4188 pts/0    S    21:13   0:00 -bash
root       32918  0.0  0.0   5476   520 pts/0    S    21:19   0:00 sleep 1h
root       32920  0.0  0.3   8888  3324 pts/0    R+   21:19   0:00 ps au
root@vagrant:~# nsenter -t 32918 -p -m
root@vagrant:/# ps
    PID TTY          TIME CMD
      1 pts/0    00:00:00 sleep
      2 pts/0    00:00:00 bash
     13 pts/0    00:00:00 ps
root@vagrant:/# exit
root@vagrant:~# ps
    PID TTY          TIME CMD
  32892 pts/0    00:00:00 sudo
  32894 pts/0    00:00:00 bash
  32918 pts/0    00:00:00 sleep
  32943 pts/0    00:00:00 ps
root@vagrant:~# kill -n 9 32918
root@vagrant:~# ps
    PID TTY          TIME CMD
  32892 pts/0    00:00:00 sudo
  32894 pts/0    00:00:00 bash
  32944 pts/0    00:00:00 ps
root@vagrant:~#


7. Найдите информацию о том, что такое :(){ :|:& };:. Запустите эту команду в своей виртуальной машине
Vagrant с Ubuntu 20.04 (это важно, поведение в других ОС не проверялось).
Некоторое время все будет "плохо", после чего (минуты) – ОС должна стабилизироваться.
Вызов dmesg расскажет, какой механизм помог автоматической стабилизации.
Как настроен этот механизм по-умолчанию, и как изменить число процессов, которое можно создать в сессии?

Это fork bomb. Программа создает копию себя и отправляет ее в фон, и запускается опять. Копия в свою очередь опять создает свою копию и т.д.
В итоге процессы плодятся и система почти умирает. По крайней мере с Ubuntu 22.04 так.

В Ubuntu 20.04 pid controller ограничивает процесс создания фоорков, что не дает системе умереть.
[16926.048681] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-5.scope

Видимо, в 22.04 механизм cgroup работает по-другому. По крайней мере структура директорий в /sys/fs/cgroup/ сильно отличается от 20.04
